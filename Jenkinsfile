pipeline {
    agent any

    environment {
        // ƒê·∫∑t t√™n cho image Docker c·ªßa b·∫°n
        IMAGE_NAME = 'vanesline/hisw'
        // T√™n c·ªßa container s·∫Ω ch·∫°y
        CONTAINER_NAME = 'spring-app'
    }

    stages {
        stage('üßπ Clean Workspace') {
            steps {
                // D·ªçn d·∫πp kh√¥ng gian l√†m vi·ªác c≈©
                cleanWs()
            }
        }

        stage('‚¨áÔ∏è Checkout Code') {
            steps {
                // L·∫•y code t·ª´ kho ch·ª©a Git
                checkout scm
            }
        }

        stage('üõ†Ô∏è Build Application') {
            steps {
                sh 'chmod +x ./mvnw' // C·∫•p quy·ªÅn th·ª±c thi cho Maven wrapper
                // Build ·ª©ng d·ª•ng Spring Boot, b·ªè qua test ƒë·ªÉ build nhanh h∆°n
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('üèóÔ∏è Build Docker Image') {
            steps {
                script {
                    // Build image m·ªõi v·ªõi tag l√† s·ªë th·ª© t·ª± c·ªßa l·∫ßn build
                    sh "docker build -t ${IMAGE_NAME}:${env.BUILD_NUMBER} ."
                    // G·∫Øn th√™m tag 'latest' ƒë·ªÉ ti·ªán cho vi·ªác tri·ªÉn khai
                    sh "docker tag ${IMAGE_NAME}:${env.BUILD_NUMBER} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('üöÄ Deploy') {
            steps {
                script {
                    // D·ª´ng container c≈© n·∫øu ƒëang ch·∫°y
                    sh "docker stop ${CONTAINER_NAME} || true"
                    // X√≥a container c≈©
                    sh "docker rm ${CONTAINER_NAME} || true"
                    // Ch·∫°y container m·ªõi t·ª´ image v·ª´a build
                    // Thay 8286 b·∫±ng c·ªïng ·ª©ng d·ª•ng c·ªßa b·∫°n
                    sh "docker run -d --name ${CONTAINER_NAME} -p 8286:8286 ${IMAGE_NAME}:latest"
                }
            }
        }
    }

    post {
        always {
            // D·ªçn d·∫πp c√°c image Docker c≈© kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng
            sh 'docker image prune -f'
        }
    }
}